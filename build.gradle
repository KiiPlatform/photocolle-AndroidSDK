// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.3'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.1"
}
apply plugin: 'maven-publish'


allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'java'

def outputDir = 'target'
def releaseName = "PhotoColleSDK-Android-${photocolleSDKVersion}"
def distributionDir = "${outputDir}/${releaseName}/distribution"
def sdkDir = 'photocolle-sdk'
def sdkOutputDir = "${sdkDir}/sdk/build"
def sdkAARName = 'sdk-release.aar'
def sdkAARPath = "${sdkOutputDir}/outputs/aar/${sdkAARName}"

task cleanRelease(type: Delete) {
    delete outputDir
}

task initTarget(dependsOn: cleanRelease) << {
    (new File(outputDir)).mkdirs()
}

task cleanSDK(dependsOn: ':photocolle-sdk:sdk:clean') {
}

task buildSDK(dependsOn: [':photocolle-sdk:sdk:build', ':photocolle-sdk:sdk:sourcesJar']) {
    mustRunAfter "cleanSDK"
}

task buildSDKJavaDoc(dependsOn: ':photocolle-sdk:sdk:javadoc') {
    mustRunAfter "cleanSDK"
}

task copySDKAARToDistribution(type: Copy, dependsOn: buildSDK) {
    from "${sdkAARPath}"
    into "${distributionDir}"
    rename("${sdkAARName}", "${releaseName}.aar")
}

task copyJavaDoc(type: Copy, dependsOn: buildSDKJavaDoc) {
    from "${sdkOutputDir}/docs/javadoc"
    into "${distributionDir}/docs/${releaseName}-API-Reference"
}

task archiveJavaDoc(type: Zip, dependsOn:buildSDKJavaDoc) {
    archiveName "${releaseName}-API-Reference.zip"
    from "${distributionDir}/docs/${releaseName}-API-Reference"
    into "${releaseName}-API-Reference"
    destinationDir new File("${distributionDir}")
}

task copyDocs(type: Copy, dependsOn: copyJavaDoc) {
    from 'docs'
    from 'README.mkd'
    from "${sdkDir}/LIMITATION.mkd"
    into "${distributionDir}/docs"
}

task copy(dependsOn: [copySDKAARToDistribution, copyDocs]) {
    mustRunAfter "initTarget"
}

task buildRelease(type: Zip, dependsOn: [initTarget, cleanSDK, buildSDK, archiveJavaDoc, copy]) {
    archiveName "${releaseName}.zip"
    from "${outputDir}/${releaseName}"
    into "${releaseName}"
    destinationDir new File(outputDir)
}

// configure for bintrayUpload task
bintray {

    // please provide these 2 value as parameter with
    // "-Pbintray_user={user_name} -Pbintray_token={api_token}"

    if(project.hasProperty('bintray_token')){
        key = project.bintray_token
    }
    if(project.hasProperty('bintray_user')){
        user = project.bintray_user
    }
    //the files to deploy are the result of maven publication
    publications = ['PhotoCollePublication']
    dryRun = false; // deploy files

    publish = true //If version should be auto published after an upload

    //Package configuration. The plugin will use the repo and name
    // properties to check if the package already exists. In that case,
    // there's no need to configure the other package properties (like
    // userOrg, desc, etc).
    pkg {
        repo = 'KiiAndroidSDK'
        name = 'photocolle-sdk'
        userOrg = 'kii'
        desc = 'PhotoCollection SDK'
        websiteUrl = 'http://documentation.kii.com/'
        issueTrackerUrl = 'http://community.kii.com/'
        labels = ['MBaaS']
        publicDownloadNumbers = true
        version {
            name = "${photocolleSDKVersion}" //Bintray logical version name
        }
    }
}

// Configure  maven publish
publishing {
    publications {
        PhotoCollePublication(MavenPublication) {
            groupId 'com.kii.photocolle'
            artifactId 'photocolle'
            version "${photocolleSDKVersion}"

            artifact "${distributionDir}/${releaseName}.aar"

            artifact("${distributionDir}/${releaseName}-API-Reference.zip"){
                classifier 'documentation'
                extension 'zip'
            }
            artifact("photocolle-sdk/sdk/build/libs/sdk-sources.jar"){
                classifier 'sources'
                extension 'jar'
            }
        }
    }
}

task debugCompile(dependsOn: [cleanSDK, buildSDK]) {
}
